openapi: 3.0.0
info:
  title: Fixer-Finder API
  description: API for managing tasks, offers, and users in Fixer-Finder.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local development server

paths:
  /tasks:
    post:
      summary: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskProps'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskProps'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
    get:
      summary: Retrieve all tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskProps'
        '500':
          description: Internal server error

  /offers:
    post:
      summary: Create a new offer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferProps'
      responses:
        '201':
          description: Offer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferProps'
        '400':
          description: Invalid input
        '500':
          description: Internal server error

  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProps'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProps'
        '400':
          description: Invalid input
        '500':
          description: Internal server error

  /users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

components:
  schemas:
    TaskProps:
      type: object
      properties:
        id:
          type: string
          example: '123e4567-e89b-12d3-a456-426614174000'
        title:
          type: string
          example: 'Fix a leaking faucet'
        description:
          type: string
          example: 'Need a plumber to fix a leak in the kitchen sink.'
        location:
          type: string
          example: 'New York, NY'
        price:
          type: number
          example: 50.0
        dueDate:
          type: string
          format: date-time
        media:
          type: array
          items:
            type: string
          example: ['image1.jpg', 'image2.jpg']
        tags:
          type: array
          items:
            type: string
          example: ['plumbing', 'repair']
    
    OfferProps:
      type: object
      properties:
        id:
          type: string
        offerDescription:
          type: string
          example: 'I can fix the leak quickly and efficiently.'
        offerMedia:
          type: string
          nullable: true
          example: 'image1.jpg'
        postingTime:
          type: string
          format: date-time
        price:
          type: number
          example: 45.0
        offerStatus:
          type: string
          example: 'pending'
        jobId:
          type: string
        workerId:
          type: number
    
    UserProps:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        createdAt:
          type: string
          format: date-time
